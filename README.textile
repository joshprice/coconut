h1. Coconut

Coconut is a *jQuery plugin* designed to simplify working with complex forms. It provides an *Object-Oriented* encapsulation of forms and their field groups using a straighforward declarative syntax. It enables some very powerful ways for decomposing forms into conceptual parts, and provides meaningful abstractions for these parts.

h2. Two Minute Tour

h3. Build a Part

Given an HTML snippet:

<pre>
  <div id="person">
    <select name="title">
        <option>Mr</option>
        <option checked="checked">Mrs</option>
    </select>
    <input type="text" name="firstname" value="Jane"/>
    <input type="text" name="lastname" value="Doe"/>
  </div>
</pre>

You create a *part* like this:

<pre>
  var person = $("#person").part();
</pre>

This builds a *part* representing @person@ with all *fields* set up automatically from their *name* attribute of the input field.

(The fields are actually jQuery wrappers of each form field element in the specified *part*)

<pre>
  person.title;
  person.firstname;
  person.lastname;
</pre>


h3. State and Field Operations

@firstname@ is a person field and calling @state()@ will simply return the field value, just like @val()@ on a jQuery object.

<pre>
  person.firstname.state();
  #=> "Jane"
</pre>

To change @firstname@ to new value, just pass the value into the @state()@ method. 

<pre>
  person.firstname.state("John");
</pre>

This is just like @person.firstname.val("John")@ in jQuery, but with the appropriate events are fired as if a real user typed the value into the field.

Setting the values of the entire person part is just as easy!

<pre>
  person.state({ title: "Mr", firstname: "John", lastname: "Smith"});
</pre>

Remember that all the user events get fired (ie. change, blur, click, etc).

Calling @state()@ on the person part simply returns the current state of the part as an object:

<pre>
  person.state();
  #=> { title: "Mr", firstname: "John", lastname: "Smith"}
</pre>

You can tell if the state has changed with @isDirty()@:

<pre>
  person.isDirty();
  #=> true
</pre>

Person is flagged as dirty, since the state of person has been changed since initialization.

Set the original state to the part with @resetState()@

<pre>
  person.resetState();
  #=> { title: "Mrs", firstname: "Jane", lastname: "Doe"}
</pre>


h3. Events Operations

Let's say you want to have a @label@ element update with changes in the value of a field. Use the @bindState()@ method passing in the CSS selector:

<pre>
  person.firstname.bindState("#first_name_label");
</pre>

Now any change of @firstname@ will update the value of the label you specified.

But what if you wanted a single label to reflect all of the fields? Simply pass a transformation function as the second argument to @bindState()@ like so. The state will be passed in as a parameter to this function so you can easily extract what you need.

<pre>
  person.bindState("#id_of_summary_span", function(s) {
    return s.title + " " + s.firstname + " " + s.lastname;
  });
</pre>

Any changes to person fields will now update the summary span using the specified transformation function.

<pre>
  person.firstname.stateChange(function(state) { /* custom logic */});
  person.stateChange(function(state) { /* custom logic */});
</pre>

State change of the @firstname@ field or @person@ part will trigger the custom handlers and pass in the latest state object.

h2. Learn More

h3. Mixin Behaviors

You can extend a part by mixing in new behaviour.

<pre>
  function Person() {
    this.summary = function() {
      var s = this.state();
      return s.title + " " + s.firstname + " " + s.lastname;
    }
  }

  var person = $("#person").part(Person);
  person.summary();
</pre>

Define behaviour @Person@ as a function, build part with the behaviour, and the @summary()@ method will be mixed into the part.

_**Behaviour mixins are the recommended way to include custom logic for a specific part.**_

You can also specify the behaviour function in the containing DOM element by supplying a @part@ attribute:

<pre>
  <div id="person" part="Person">
    ...
  </div>
</pre>

Then:

<pre>
  var person = $("#person").part();
  person.summary();
</pre>

Coconut will mixin the @Person@ behaviour for you automatically.

h3. Building Composite Parts

You can build a composite part with another part as field by setting up @part@ property on any DOM element which can be used as a container (typically _div_s, _fieldset_s, etc).

With this HTML:

<pre>
  <div id="person">
    ...
    <div part="" name="contact">
      <input type="text" name="number" value="+61 2 9555 0123" />
      <input type="text" name="type" value="work" />
    </div>
  </div>
</pre>

Then:

<pre>
  var person = $("#person").part();

  person.state();  #=> { title: "Mr", firstname: "John", lastname: "Smith", contact: { number: "+61 2 9555 0123", type: "work" } }

  person.contact.state();  #=> { number: "+61 2 9555 0123", type: "work" }

  person.contact.number.state();  #=> "+61 2 9555 0123"
</pre>


Build a part with a field containing an array of sub-fields with the same name (e.g. person may have multiple emails) by setting @fieldtype@ property to @array@ on the first field element.

Given this HTML:

<pre>
  <div id="person">
    ...
    <input type="text" name="email" fieldtype="array" value="a@my.com" />
    <input type="text" name="email" value="b@my.com" />
  </div>
</pre>

Then:

<pre>
  var person = $("#person").part();

  person.state();  #=> { title: "Mr", firstname: "John", lastname: "Smith", emails: ["a@my.com", "b@my.com"] }

  person.emails.state();  #=> ["a@my.com", "b@my.com"]

  person.emails[0].state();  #=> "a@my.com"
</pre>


h3. Dynamic Behaviour (Syncing between the DOM and the Part)

Adding a new DOM element dynamically will add the corresponding field. Any event registered on a part works for the newly added field too. (Pretty much like jQuery live events).

Given two emails in the DOM already, then:

<pre>
  var person = $("#person").part();

  var newEmail = $("<input type="text" name="email"></input>");
  person.container.append(newEmail);
  newEmail.sync();

  var emailCount = person.emails.length;
</pre>

@emailCount@ is @3@, reflects the added email. 

*Coconut* extends jQuery with the @sync()@ method. Just call it after the new elements are added.

The same thing happens when removing DOM elements, the fields will be removed.

Say we have two emails in the DOM already, and we remove the last one:

<pre>
  var person = $("#person").part();

  person.container.find("input[name=email]:last").remove();
  person.sync();

  var emailCount = person.emails.length;
</pre>

@emailCount@ is now @1@, reflecting the removal.

Call @sync()@ on a part after removing DOM elements.

h3. Virtual Field

A virtual field in Coconut is a jQuery object of a div, fieldset or other container like dom element, which contains all Fields in it's scope.

You can treat virtual field as a normal Field, that means you can call @state()@, @isDirty()@, @resetState()@, and do event operations like @bindState()@, @stateChange@ on it...

Given this HTML:

<pre>
  <div id="person">
    <div id="basicInfo">
      <input type="text" name="firstname" value="Jane"/>
      <input type="text" name="lastname" value="Doe"/>
      ...
    </div>
    ...
  </div>
</pre>

Then:

<pre>
  var person = $("#person").part();
  
  var basicInfo = $("#basicInfo");
  
  basicInfo.state();  #=> { firstname: "Jane", lastname: "Doe", ... }

  basicInfo.state({ firstname: "Mary" });  #=> { firstname: "Mary", lastname: "Doe", ... }
  
  basicInfo.resetState();  #=> { firstname: "Jane", lastname: "Doe", ... }

  basicInfo.bindState("#id_of_some_label", function(state){ /* compose a string from state */ });

  basicInfo.stateChange(function(state){ /* play with the new state */ });
  ...
</pre>

The flexibility of virtual field makes the event wiring up much more expressive and easier.

h1. Rationale

h1. Design Suggestions

h1. API Reference

h1. Q&A
